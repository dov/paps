paps_config = configuration_data()

paps_config.set('configure_input', 'paps-config.h file generated by Meson')
paps_config.set('PACKAGE', meson.project_name())
paps_config.set('PACKAGE_NAME', 'paps')
paps_config.set('PACKAGE_BUGREPORT', 'https://github.com/paps/paps/issues/new')
paps_config.set('PAPS_VERSION', meson.project_version())
version_arr = meson.project_version().split('.')
paps_config.set('PAPS_MAJOR_VERSION', version_arr[0].to_int())
paps_config.set('PAPS_MINOR_VERSION', version_arr[1].to_int())
paps_config.set('PAPS_MICRO_VERSION', version_arr[2].to_int())

paps_config.set('SIZEOF_INT', cc.sizeof('int'))

if cc.get_id() == 'msvc'
  paps_config.set('PAPS_MSVC_BUILD_PLACEHOLDER', '#define PAPS_BUILT_WITH_MSVC')
else
  paps_config.set('PAPS_MSVC_BUILD_PLACEHOLDER', '#undef PAPS_BUILT_WITH_MSVC')
endif

#paps_config_h = configure_file(input: files('paps-config.h.in'),
#  output: 'paps-config.h',
#  configuration: paps_config,
#  install_dir: join_paths(get_option('includedir'), 'paps'))

paps = executable('paps',
                  ['paps.cc',
                   'format_from_dict.cc'],
                  c_args: ['-DHAVE_CONFIG_H'],
                  include_directories: incs,
                  dependencies : [pango_dep,
                                  cairo_dep,
                                  glib_dep,
                                  gobject_dep,
                                  fmt_dep,
                                  libpaper],
                  install: true)

install_man('paps.1')
